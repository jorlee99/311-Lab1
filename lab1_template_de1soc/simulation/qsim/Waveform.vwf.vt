// Copyright (C) 1991-2014 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "01/23/2020 00:06:02"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Basic_Organ_Solution
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Basic_Organ_Solution_vlg_sample_tst(
	AUD_ADCDAT,
	AUD_ADCLRCK,
	AUD_BCLK,
	AUD_DACLRCK,
	CLOCK_50,
	FPGA_I2C_SDAT,
	GPIO_0,
	GPIO_1,
	KEY,
	SW,
	sampler_tx
);
input  AUD_ADCDAT;
input  AUD_ADCLRCK;
input  AUD_BCLK;
input  AUD_DACLRCK;
input  CLOCK_50;
input  FPGA_I2C_SDAT;
input [35:0] GPIO_0;
input [35:0] GPIO_1;
input [3:0] KEY;
input [9:0] SW;
output sampler_tx;

reg sample;
time current_time;
always @(AUD_ADCDAT or AUD_ADCLRCK or AUD_BCLK or AUD_DACLRCK or CLOCK_50 or FPGA_I2C_SDAT or GPIO_0 or GPIO_1 or KEY or SW)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Basic_Organ_Solution_vlg_check_tst (
	AUD_ADCLRCK,
	AUD_BCLK,
	AUD_DACDAT,
	AUD_DACLRCK,
	AUD_XCK,
	FPGA_I2C_SCLK,
	FPGA_I2C_SDAT,
	GPIO_0,
	GPIO_1,
	HEX0,
	HEX1,
	HEX2,
	HEX3,
	HEX4,
	HEX5,
	LEDR,
	sampler_rx
);
input  AUD_ADCLRCK;
input  AUD_BCLK;
input  AUD_DACDAT;
input  AUD_DACLRCK;
input  AUD_XCK;
input  FPGA_I2C_SCLK;
input  FPGA_I2C_SDAT;
input [35:0] GPIO_0;
input [35:0] GPIO_1;
input [6:0] HEX0;
input [6:0] HEX1;
input [6:0] HEX2;
input [6:0] HEX3;
input [6:0] HEX4;
input [6:0] HEX5;
input [9:0] LEDR;
input sampler_rx;

reg  AUD_ADCLRCK_expected;
reg  AUD_BCLK_expected;
reg  AUD_DACDAT_expected;
reg  AUD_DACLRCK_expected;
reg  AUD_XCK_expected;
reg  FPGA_I2C_SCLK_expected;
reg  FPGA_I2C_SDAT_expected;
reg [35:0] GPIO_0_expected;
reg [35:0] GPIO_1_expected;
reg [6:0] HEX0_expected;
reg [6:0] HEX1_expected;
reg [6:0] HEX2_expected;
reg [6:0] HEX3_expected;
reg [6:0] HEX4_expected;
reg [6:0] HEX5_expected;
reg [9:0] LEDR_expected;

reg  AUD_ADCLRCK_prev;
reg  AUD_BCLK_prev;
reg  AUD_DACDAT_prev;
reg  AUD_DACLRCK_prev;
reg  AUD_XCK_prev;
reg  FPGA_I2C_SCLK_prev;
reg  FPGA_I2C_SDAT_prev;
reg [35:0] GPIO_0_prev;
reg [35:0] GPIO_1_prev;
reg [6:0] HEX0_prev;
reg [6:0] HEX1_prev;
reg [6:0] HEX2_prev;
reg [6:0] HEX3_prev;
reg [6:0] HEX4_prev;
reg [6:0] HEX5_prev;
reg [9:0] LEDR_prev;

reg  AUD_ADCLRCK_expected_prev;
reg  AUD_BCLK_expected_prev;
reg  AUD_DACDAT_expected_prev;
reg  AUD_DACLRCK_expected_prev;
reg  AUD_XCK_expected_prev;
reg  FPGA_I2C_SCLK_expected_prev;
reg  FPGA_I2C_SDAT_expected_prev;
reg [9:0] LEDR_expected_prev;

reg  last_AUD_ADCLRCK_exp;
reg  last_AUD_BCLK_exp;
reg  last_AUD_DACDAT_exp;
reg  last_AUD_DACLRCK_exp;
reg  last_AUD_XCK_exp;
reg  last_FPGA_I2C_SCLK_exp;
reg  last_FPGA_I2C_SDAT_exp;
reg [9:0] last_LEDR_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:16] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 16'b1;
end

// update real /o prevs

always @(trigger)
begin
	AUD_ADCLRCK_prev = AUD_ADCLRCK;
	AUD_BCLK_prev = AUD_BCLK;
	AUD_DACDAT_prev = AUD_DACDAT;
	AUD_DACLRCK_prev = AUD_DACLRCK;
	AUD_XCK_prev = AUD_XCK;
	FPGA_I2C_SCLK_prev = FPGA_I2C_SCLK;
	FPGA_I2C_SDAT_prev = FPGA_I2C_SDAT;
	GPIO_0_prev = GPIO_0;
	GPIO_1_prev = GPIO_1;
	HEX0_prev = HEX0;
	HEX1_prev = HEX1;
	HEX2_prev = HEX2;
	HEX3_prev = HEX3;
	HEX4_prev = HEX4;
	HEX5_prev = HEX5;
	LEDR_prev = LEDR;
end

// update expected /o prevs

always @(trigger)
begin
	AUD_ADCLRCK_expected_prev = AUD_ADCLRCK_expected;
	AUD_BCLK_expected_prev = AUD_BCLK_expected;
	AUD_DACDAT_expected_prev = AUD_DACDAT_expected;
	AUD_DACLRCK_expected_prev = AUD_DACLRCK_expected;
	AUD_XCK_expected_prev = AUD_XCK_expected;
	FPGA_I2C_SCLK_expected_prev = FPGA_I2C_SCLK_expected;
	FPGA_I2C_SDAT_expected_prev = FPGA_I2C_SDAT_expected;
	LEDR_expected_prev = LEDR_expected;
end



// expected LEDR[0]
initial
begin
	LEDR_expected[0] = 1'bX;
end 

// expected LEDR[1]
initial
begin
	LEDR_expected[1] = 1'bX;
end 

// expected LEDR[2]
initial
begin
	LEDR_expected[2] = 1'bX;
end 

// expected LEDR[3]
initial
begin
	LEDR_expected[3] = 1'bX;
end 

// expected LEDR[4]
initial
begin
	LEDR_expected[4] = 1'bX;
end 

// expected LEDR[5]
initial
begin
	LEDR_expected[5] = 1'bX;
end 

// expected LEDR[6]
initial
begin
	LEDR_expected[6] = 1'bX;
end 

// expected LEDR[7]
initial
begin
	LEDR_expected[7] = 1'bX;
end 

// expected AUD_DACDAT
initial
begin
	AUD_DACDAT_expected = 1'bX;
end 

// expected AUD_XCK
initial
begin
	AUD_XCK_expected = 1'bX;
end 

// expected FPGA_I2C_SCLK
initial
begin
	FPGA_I2C_SCLK_expected = 1'bX;
end 
// generate trigger
always @(AUD_ADCLRCK_expected or AUD_ADCLRCK or AUD_BCLK_expected or AUD_BCLK or AUD_DACDAT_expected or AUD_DACDAT or AUD_DACLRCK_expected or AUD_DACLRCK or AUD_XCK_expected or AUD_XCK or FPGA_I2C_SCLK_expected or FPGA_I2C_SCLK or FPGA_I2C_SDAT_expected or FPGA_I2C_SDAT or GPIO_0_expected or GPIO_0 or GPIO_1_expected or GPIO_1 or HEX0_expected or HEX0 or HEX1_expected or HEX1 or HEX2_expected or HEX2 or HEX3_expected or HEX3 or HEX4_expected or HEX4 or HEX5_expected or HEX5 or LEDR_expected or LEDR)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected AUD_ADCLRCK = %b | expected AUD_BCLK = %b | expected AUD_DACDAT = %b | expected AUD_DACLRCK = %b | expected AUD_XCK = %b | expected FPGA_I2C_SCLK = %b | expected FPGA_I2C_SDAT = %b | expected GPIO_0 = %b | expected GPIO_1 = %b | expected HEX0 = %b | expected HEX1 = %b | expected HEX2 = %b | expected HEX3 = %b | expected HEX4 = %b | expected HEX5 = %b | expected LEDR = %b | ",AUD_ADCLRCK_expected_prev,AUD_BCLK_expected_prev,AUD_DACDAT_expected_prev,AUD_DACLRCK_expected_prev,AUD_XCK_expected_prev,FPGA_I2C_SCLK_expected_prev,FPGA_I2C_SDAT_expected_prev,GPIO_0_expected_prev,GPIO_1_expected_prev,HEX0_expected_prev,HEX1_expected_prev,HEX2_expected_prev,HEX3_expected_prev,HEX4_expected_prev,HEX5_expected_prev,LEDR_expected_prev);
	$display("| real AUD_ADCLRCK = %b | real AUD_BCLK = %b | real AUD_DACDAT = %b | real AUD_DACLRCK = %b | real AUD_XCK = %b | real FPGA_I2C_SCLK = %b | real FPGA_I2C_SDAT = %b | real GPIO_0 = %b | real GPIO_1 = %b | real HEX0 = %b | real HEX1 = %b | real HEX2 = %b | real HEX3 = %b | real HEX4 = %b | real HEX5 = %b | real LEDR = %b | ",AUD_ADCLRCK_prev,AUD_BCLK_prev,AUD_DACDAT_prev,AUD_DACLRCK_prev,AUD_XCK_prev,FPGA_I2C_SCLK_prev,FPGA_I2C_SDAT_prev,GPIO_0_prev,GPIO_1_prev,HEX0_prev,HEX1_prev,HEX2_prev,HEX3_prev,HEX4_prev,HEX5_prev,LEDR_prev);
`endif
	if (
		( AUD_ADCLRCK_expected_prev !== 1'bx ) && ( AUD_ADCLRCK_prev !== AUD_ADCLRCK_expected_prev )
		&& ((AUD_ADCLRCK_expected_prev !== last_AUD_ADCLRCK_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AUD_ADCLRCK :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AUD_ADCLRCK_expected_prev);
		$display ("     Real value = %b", AUD_ADCLRCK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_AUD_ADCLRCK_exp = AUD_ADCLRCK_expected_prev;
	end
	if (
		( AUD_BCLK_expected_prev !== 1'bx ) && ( AUD_BCLK_prev !== AUD_BCLK_expected_prev )
		&& ((AUD_BCLK_expected_prev !== last_AUD_BCLK_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AUD_BCLK :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AUD_BCLK_expected_prev);
		$display ("     Real value = %b", AUD_BCLK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_AUD_BCLK_exp = AUD_BCLK_expected_prev;
	end
	if (
		( AUD_DACDAT_expected_prev !== 1'bx ) && ( AUD_DACDAT_prev !== AUD_DACDAT_expected_prev )
		&& ((AUD_DACDAT_expected_prev !== last_AUD_DACDAT_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AUD_DACDAT :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AUD_DACDAT_expected_prev);
		$display ("     Real value = %b", AUD_DACDAT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_AUD_DACDAT_exp = AUD_DACDAT_expected_prev;
	end
	if (
		( AUD_DACLRCK_expected_prev !== 1'bx ) && ( AUD_DACLRCK_prev !== AUD_DACLRCK_expected_prev )
		&& ((AUD_DACLRCK_expected_prev !== last_AUD_DACLRCK_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AUD_DACLRCK :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AUD_DACLRCK_expected_prev);
		$display ("     Real value = %b", AUD_DACLRCK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_AUD_DACLRCK_exp = AUD_DACLRCK_expected_prev;
	end
	if (
		( AUD_XCK_expected_prev !== 1'bx ) && ( AUD_XCK_prev !== AUD_XCK_expected_prev )
		&& ((AUD_XCK_expected_prev !== last_AUD_XCK_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AUD_XCK :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AUD_XCK_expected_prev);
		$display ("     Real value = %b", AUD_XCK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_AUD_XCK_exp = AUD_XCK_expected_prev;
	end
	if (
		( FPGA_I2C_SCLK_expected_prev !== 1'bx ) && ( FPGA_I2C_SCLK_prev !== FPGA_I2C_SCLK_expected_prev )
		&& ((FPGA_I2C_SCLK_expected_prev !== last_FPGA_I2C_SCLK_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port FPGA_I2C_SCLK :: @time = %t",  $realtime);
		$display ("     Expected value = %b", FPGA_I2C_SCLK_expected_prev);
		$display ("     Real value = %b", FPGA_I2C_SCLK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_FPGA_I2C_SCLK_exp = FPGA_I2C_SCLK_expected_prev;
	end
	if (
		( FPGA_I2C_SDAT_expected_prev !== 1'bx ) && ( FPGA_I2C_SDAT_prev !== FPGA_I2C_SDAT_expected_prev )
		&& ((FPGA_I2C_SDAT_expected_prev !== last_FPGA_I2C_SDAT_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port FPGA_I2C_SDAT :: @time = %t",  $realtime);
		$display ("     Expected value = %b", FPGA_I2C_SDAT_expected_prev);
		$display ("     Real value = %b", FPGA_I2C_SDAT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_FPGA_I2C_SDAT_exp = FPGA_I2C_SDAT_expected_prev;
	end
	if (
		( LEDR_expected_prev[0] !== 1'bx ) && ( LEDR_prev[0] !== LEDR_expected_prev[0] )
		&& ((LEDR_expected_prev[0] !== last_LEDR_exp[0]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_LEDR_exp[0] = LEDR_expected_prev[0];
	end
	if (
		( LEDR_expected_prev[1] !== 1'bx ) && ( LEDR_prev[1] !== LEDR_expected_prev[1] )
		&& ((LEDR_expected_prev[1] !== last_LEDR_exp[1]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_LEDR_exp[1] = LEDR_expected_prev[1];
	end
	if (
		( LEDR_expected_prev[2] !== 1'bx ) && ( LEDR_prev[2] !== LEDR_expected_prev[2] )
		&& ((LEDR_expected_prev[2] !== last_LEDR_exp[2]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_LEDR_exp[2] = LEDR_expected_prev[2];
	end
	if (
		( LEDR_expected_prev[3] !== 1'bx ) && ( LEDR_prev[3] !== LEDR_expected_prev[3] )
		&& ((LEDR_expected_prev[3] !== last_LEDR_exp[3]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_LEDR_exp[3] = LEDR_expected_prev[3];
	end
	if (
		( LEDR_expected_prev[4] !== 1'bx ) && ( LEDR_prev[4] !== LEDR_expected_prev[4] )
		&& ((LEDR_expected_prev[4] !== last_LEDR_exp[4]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_LEDR_exp[4] = LEDR_expected_prev[4];
	end
	if (
		( LEDR_expected_prev[5] !== 1'bx ) && ( LEDR_prev[5] !== LEDR_expected_prev[5] )
		&& ((LEDR_expected_prev[5] !== last_LEDR_exp[5]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_LEDR_exp[5] = LEDR_expected_prev[5];
	end
	if (
		( LEDR_expected_prev[6] !== 1'bx ) && ( LEDR_prev[6] !== LEDR_expected_prev[6] )
		&& ((LEDR_expected_prev[6] !== last_LEDR_exp[6]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_LEDR_exp[6] = LEDR_expected_prev[6];
	end
	if (
		( LEDR_expected_prev[7] !== 1'bx ) && ( LEDR_prev[7] !== LEDR_expected_prev[7] )
		&& ((LEDR_expected_prev[7] !== last_LEDR_exp[7]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_LEDR_exp[7] = LEDR_expected_prev[7];
	end
	if (
		( LEDR_expected_prev[8] !== 1'bx ) && ( LEDR_prev[8] !== LEDR_expected_prev[8] )
		&& ((LEDR_expected_prev[8] !== last_LEDR_exp[8]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_LEDR_exp[8] = LEDR_expected_prev[8];
	end
	if (
		( LEDR_expected_prev[9] !== 1'bx ) && ( LEDR_prev[9] !== LEDR_expected_prev[9] )
		&& ((LEDR_expected_prev[9] !== last_LEDR_exp[9]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEDR[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEDR_expected_prev);
		$display ("     Real value = %b", LEDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_LEDR_exp[9] = LEDR_expected_prev[9];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Basic_Organ_Solution_vlg_vec_tst();
// constants                                           
// general purpose registers
reg AUD_ADCDAT;
reg treg_AUD_ADCLRCK;
reg treg_AUD_BCLK;
reg treg_AUD_DACLRCK;
reg CLOCK_50;
reg treg_FPGA_I2C_SDAT;
reg [35:0] treg_GPIO_0;
reg [35:0] treg_GPIO_1;
reg [3:0] KEY;
reg [9:0] SW;
// wires                                               
wire AUD_ADCLRCK;
wire AUD_BCLK;
wire AUD_DACDAT;
wire AUD_DACLRCK;
wire AUD_XCK;
wire FPGA_I2C_SCLK;
wire FPGA_I2C_SDAT;
wire [35:0] GPIO_0;
wire [35:0] GPIO_1;
wire [6:0] HEX0;
wire [6:0] HEX1;
wire [6:0] HEX2;
wire [6:0] HEX3;
wire [6:0] HEX4;
wire [6:0] HEX5;
wire [9:0] LEDR;

wire sampler;                             

// assign statements (if any)                          
assign AUD_ADCLRCK = treg_AUD_ADCLRCK;
assign AUD_BCLK = treg_AUD_BCLK;
assign AUD_DACLRCK = treg_AUD_DACLRCK;
assign FPGA_I2C_SDAT = treg_FPGA_I2C_SDAT;
assign GPIO_0 = treg_GPIO_0;
assign GPIO_1 = treg_GPIO_1;
Basic_Organ_Solution i1 (
// port map - connection between master ports and signals/registers   
	.AUD_ADCDAT(AUD_ADCDAT),
	.AUD_ADCLRCK(AUD_ADCLRCK),
	.AUD_BCLK(AUD_BCLK),
	.AUD_DACDAT(AUD_DACDAT),
	.AUD_DACLRCK(AUD_DACLRCK),
	.AUD_XCK(AUD_XCK),
	.CLOCK_50(CLOCK_50),
	.FPGA_I2C_SCLK(FPGA_I2C_SCLK),
	.FPGA_I2C_SDAT(FPGA_I2C_SDAT),
	.GPIO_0(GPIO_0),
	.GPIO_1(GPIO_1),
	.HEX0(HEX0),
	.HEX1(HEX1),
	.HEX2(HEX2),
	.HEX3(HEX3),
	.HEX4(HEX4),
	.HEX5(HEX5),
	.KEY(KEY),
	.LEDR(LEDR),
	.SW(SW)
);

// SW[0]
initial
begin
	SW[0] = 1'b0;
	SW[0] = #40000 1'b1;
end 

// SW[1]
initial
begin
	SW[1] = 1'b0;
	SW[1] = #520000 1'b1;
end 

// SW[2]
initial
begin
	SW[2] = 1'b0;
	SW[2] = #260000 1'b1;
	SW[2] = #260000 1'b0;
	SW[2] = #260000 1'b1;
end 

// SW[3]
initial
begin
	SW[3] = 1'b0;
	SW[3] = #130000 1'b1;
	# 130000;
	repeat(2)
	begin
		SW[3] = 1'b0;
		SW[3] = #130000 1'b1;
		# 130000;
	end
	SW[3] = 1'b0;
	SW[3] = #130000 1'b1;
end 

// CLOCK_50
always
begin
	CLOCK_50 = 1'b0;
	CLOCK_50 = #25000 1'b1;
	#25000;
end 

// AUD_ADCDAT
initial
begin
	AUD_ADCDAT = 1'b0;
end 

// AUD_ADCLRCK
initial
begin
	treg_AUD_ADCLRCK = 1'bZ;
end 

// AUD_BCLK
initial
begin
	treg_AUD_BCLK = 1'bZ;
end 

// AUD_DACLRCK
initial
begin
	treg_AUD_DACLRCK = 1'bZ;
end 

// FPGA_I2C_SDAT
initial
begin
	treg_FPGA_I2C_SDAT = 1'bZ;
end 

Basic_Organ_Solution_vlg_sample_tst tb_sample (
	.AUD_ADCDAT(AUD_ADCDAT),
	.AUD_ADCLRCK(AUD_ADCLRCK),
	.AUD_BCLK(AUD_BCLK),
	.AUD_DACLRCK(AUD_DACLRCK),
	.CLOCK_50(CLOCK_50),
	.FPGA_I2C_SDAT(FPGA_I2C_SDAT),
	.GPIO_0(GPIO_0),
	.GPIO_1(GPIO_1),
	.KEY(KEY),
	.SW(SW),
	.sampler_tx(sampler)
);

Basic_Organ_Solution_vlg_check_tst tb_out(
	.AUD_ADCLRCK(AUD_ADCLRCK),
	.AUD_BCLK(AUD_BCLK),
	.AUD_DACDAT(AUD_DACDAT),
	.AUD_DACLRCK(AUD_DACLRCK),
	.AUD_XCK(AUD_XCK),
	.FPGA_I2C_SCLK(FPGA_I2C_SCLK),
	.FPGA_I2C_SDAT(FPGA_I2C_SDAT),
	.GPIO_0(GPIO_0),
	.GPIO_1(GPIO_1),
	.HEX0(HEX0),
	.HEX1(HEX1),
	.HEX2(HEX2),
	.HEX3(HEX3),
	.HEX4(HEX4),
	.HEX5(HEX5),
	.LEDR(LEDR),
	.sampler_rx(sampler)
);
endmodule

